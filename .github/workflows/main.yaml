name: networksecurityworkflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - README.md

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Lint Code
        run: echo "Linting repo"
      - name: Run Unit Tests
        run: echo "Running unit tests"

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Utils
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR repository if not exists
        run: |
          aws ecr describe-repositories --repository-names ${{ secrets.ECR_REPOSITORY_NAME }} || \
          aws ecr create-repository --repository-name ${{ secrets.ECR_REPOSITORY_NAME }} --image-scanning-configuration scanOnPush=true

      - name: Build, tag and push image to AWS ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        run: |
          # Set image tag to first 7 characters of commit SHA
          IMAGE_TAG=${GITHUB_SHA::7}
          
          # Build Docker image with full ECR path
          echo "Building Docker image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          
          # Push both tags
          echo "Pushing Docker image..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "Image pushed to ECR with tags: $IMAGE_TAG and latest"
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  Continuous-Deployment:  
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Stop and remove existing container
        run: |
          # Force remove any existing container with this name
          docker rm -f networksecurity 2>/dev/null || echo "No existing container to remove"
       
      - name: Pull latest images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        run: |
          echo "Pulling image: $ECR_REGISTRY/$ECR_REPOSITORY:latest"
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:latest
         
      - name: Run Docker Image to serve users
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        run: |
          docker run -d -p 8080:8080 --ipc="host" --name=networksecurity \
            -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' \
            -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
            -e 'AWS_REGION=${{ secrets.AWS_REGION }}' \
            -e 'MONGO_DB_URL=${{ secrets.MONGO_DB_URL }}' \
            $ECR_REGISTRY/$ECR_REPOSITORY:latest
            
      - name: Verify deployment
        run: |
          # Wait a moment for container to start
          sleep 10
          
          # Check if container is running
          if docker ps | grep -q networksecurity; then
            echo "✅ Container is running successfully"
            docker ps --filter "name=networksecurity"
          else
            echo "❌ Container failed to start"
            docker logs networksecurity || echo "No logs available"
            exit 1
          fi
          
      - name: Clean previous images and containers
        run: |
          # Clean up old/unused images and containers
          docker system prune -f